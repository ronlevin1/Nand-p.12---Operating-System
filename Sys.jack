// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library that supports various program execution services.
 */
class Sys {
    /** Performs all the initializations required by the OS. */
    function void init() {
        // Pseudocode:
        // 1. for each relevant OS class, do Class.init
        //    Some OS classes depend on others, so order is important here!
        // 2. do Main.main()
        // 3. do Sys.halt()
        do Math.init();
        do Keyboard.init();
        do Memory.init();
        do Output.init();
        do Screen.init();
        do Main.main();
        return;
    }

    /** Halts program execution. */
    function void halt() {
        var int x, y, temp;
        let x = 0;
        let y = 1;
        let temp = 0;

        while (true) {
            // some irrelevant procedure to keep the program running
            let temp = x;
            let x = y;
            let y = temp;
        }
        return;
    }

    /** Waits approximately duration milliseconds and returns.  */
    function void wait(int duration) {
        var int milliseconds, temp;
        let milliseconds = 1000; // TODO: change according to the system to match the real time.
        /*
            * The following loop is a simple way to wait for a given duration.
            to replace 'miliseconds': run and test this function with duration=10*1000 and compare to a stopwatch for 10 seconds. adjust 'miliseconds' until a good match is found.
        */
        for (var int i = 0; i < duration; i = i + 1) {
            for (var int j = 0; j < milliseconds; j = j + 1) {
                let temp = 0;
            }
        }
        return;
    }

    /** Displays the given error code in the form "ERR<errorCode>",
     *  and halts the program's execution. */
    function void error(int errorCode) {
        do Output.printString("ERR<");
        do Output.printInt(errorCode);
        do Output.printString(">");
        do Output.println();
        do halt();
        return;
    }
}
