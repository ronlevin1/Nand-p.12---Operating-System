// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String { // TODO: test
    field Array str;
    field int len, maxLen;

    /** constructs a new empty string with a maximum len of maxlen
     *  and initial len of 0. */
    constructor String new(int maxlen) {
        let str = Array.new(maxlen);
        let len = 0;
        let maxLen = maxlen;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        let len = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < maxLen) & (j > -1)) {
            return str.peek(j);
        }
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        //todo: maybe its required to convert c to int?
        if ((j < maxLen) & (j > -1)) {
            do str.poke(j, c);
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            do setCharAt(len, c);
            let len = (len + 1);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0){
            let len = (len - 1);
            do setCharAt(len, 0);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.len()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val, i, d;
        let i=0;
        let val=0;
        while(i<len){
            let d = charAt(i);
            let val = (val*10) + d;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        var int lastDigit, n, mod, valLen;
        var char c;
        //
        let valLen = 0;
        let len = 0; // erase the current string;
        //
        let n = val;
        while(n > 0){
            let valLen = (valLen + 1);
            let n = n / 10;
        }
        // integer and modolu parts of val
        let n = val/10;
        let mod = val - (n*10);
        while(valLen > 0){
            let valLen = (valLen - 1);
            let lastDigit = mod;
            let c = lastDigit + 48; // +48?
            do setCharAt(valLen, c);
            let n = n / 10;
            let mod = n - (n*10);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
