// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
 class String {
    field Array str;
    field int len, maxLen;

    /** constructs a new empty string with a maximum len of maxlen
     *  and initial len of 0. */
    constructor String new(int maxlen) {
        if (maxlen = 0){
            let maxlen = 1;
        }
        let str = Array.new(maxlen);
        let len = 0;
        let maxLen = maxlen;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        let len = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
        // if ((j < maxLen) & (j > -1)) {
        //     return str[j];
        // }
        // return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        //todo: maybe its required to convert c to int?
        let str[j] = c;
        // if ((j < maxLen) & (j > -1)) {
        //     let str[j] = c;
        // }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            // do setCharAt(len, c);
            let str[len] = c;
            let len = (len + 1);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0){
            let len = (len - 1);
            do setCharAt(len, 0);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.len()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val

        // todo: fix and test
        var int val, i, d, sign;
        var char c;
        
        let i=0;
        let val=0;
        let sign = 0;

        if(charAt(0) = 45){ // = '-'; check for negative sign
            let sign = 1;
            let i = 1;
        }

        while(i<length()){
            let c = charAt(i);
            // check for non-digit character
            if((c < 48) | (c > 57)){ 
                return val;
            }
            let d = charToDigit(c);
            let val = (val*10) + d;
            let i = (i + 1);
        }
        if(sign = 1){
            let val = -val;
        }
        return val;
    }

    method char digitToChar(int d){
        return d + 48;
    }

    method int charToDigit(char c){
        return c - 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        
        let len = 0; // erase the current string
        //
        if(val < 0){
            do appendChar(45); // append the neg sign
            let val = -val;
        }
        //
        do recursivePart(val);
        return;
    }

    method void recursivePart(int val){
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        var int lastDigit, remainder;
        var char c;

        if(val < 10){
            let c = digitToChar(val);
            do appendChar(c);
            return;
        }
        else{
            let remainder = val / 10;
            do recursivePart(remainder);
            let lastDigit = val - (remainder * 10);
            let c = digitToChar(lastDigit);
            do appendChar(c);
        }
        
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
